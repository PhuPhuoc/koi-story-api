definitions:
  commentmodel.CreateCommentModel:
    properties:
      content:
        type: string
      user_id:
        type: string
    type: object
  imagemodel.PostImage:
    properties:
      file_path:
        type: string
      id:
        type: string
      image_order:
        type: integer
    type: object
  marketmodel.MarketDetails:
    properties:
      color:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      listImage:
        items:
          $ref: '#/definitions/imagemodel.PostImage'
        type: array
      old:
        type: string
      phone_number:
        type: string
      post_type:
        type: string
      price:
        type: number
      product_name:
        type: string
      product_type:
        type: string
      seller_address:
        type: string
      size:
        type: string
      title:
        type: string
      type:
        type: string
      user_id:
        type: string
    type: object
  marketmodel.NewPostMarket:
    properties:
      color:
        type: string
      description:
        type: string
      list_image:
        items:
          type: string
        type: array
      old:
        type: string
      phone_number:
        type: string
      post_type:
        type: string
      price:
        type: number
      product_name:
        type: string
      product_type:
        type: string
      seller_address:
        type: string
      size:
        type: string
      title:
        type: string
      type:
        type: string
      user_id:
        type: string
    type: object
  marketmodel.UpdatePostMarket:
    properties:
      color:
        type: string
      description:
        type: string
      old:
        type: string
      phone_number:
        type: string
      post_type:
        type: string
      price:
        type: number
      product_name:
        type: string
      product_type:
        type: string
      seller_address:
        type: string
      size:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  usermodel.Register:
    properties:
      confirm-password:
        type: string
      email:
        type: string
      password:
        type: string
      user_name:
        type: string
    type: object
  usermodel.UserLoginInfo:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
  title: Koi Story API
  version: "1.0"
paths:
  /markets:
    get:
      consumes:
      - application/json
      description: Get all market's post
      produces:
      - application/json
      responses:
        "200":
          description: data object
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request error
          schema: {}
      summary: Get all market's post
      tags:
      - markets
    post:
      consumes:
      - application/json
      description: Create new market's post
      parameters:
      - description: details of new post of market
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/marketmodel.NewPostMarket'
      produces:
      - application/json
      responses:
        "201":
          description: message success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request error
          schema: {}
      summary: Create new market's post
      tags:
      - markets
  /markets/{post_id}:
    delete:
      consumes:
      - application/json
      description: Delete post details by post ID
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Deleted successfully
          schema:
            type: string
        "400":
          description: Invalid post ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete market's post
      tags:
      - markets
    get:
      consumes:
      - application/json
      description: Get market post details by post ID
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: market post details
          schema:
            $ref: '#/definitions/marketmodel.MarketDetails'
        "400":
          description: Invalid post ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties: true
            type: object
      summary: Get details of a market's post
      tags:
      - markets
    put:
      consumes:
      - application/json
      description: Update market's post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: details of current post of market
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/marketmodel.UpdatePostMarket'
      produces:
      - application/json
      responses:
        "200":
          description: message success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request error
          schema: {}
      summary: Update market's post
      tags:
      - markets
  /post/{post_id}/comment:
    get:
      consumes:
      - application/json
      description: Get all comment's post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: data object
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request error
          schema: {}
      summary: Get all comment's post
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Add new comment to post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: comment info
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/commentmodel.CreateCommentModel'
      produces:
      - application/json
      responses:
        "201":
          description: message success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request error
          schema: {}
      summary: Add new commnet to post
      tags:
      - comments
  /post/{post_id}/comment/{comment_id}:
    delete:
      consumes:
      - application/json
      description: Delete comment in post by image ID
      parameters:
      - description: post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: comment ID
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Deleted successfully
          schema:
            type: string
        "400":
          description: Invalid post ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete  post'comment
      tags:
      - comments
  /post/{post_id}/image/{image_url}:
    delete:
      consumes:
      - application/json
      description: Delete image in post by image ID
      parameters:
      - description: post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: image url
        in: path
        name: image_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Deleted successfully
          schema:
            type: string
        "400":
          description: Invalid post ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete image  post
      tags:
      - images
    post:
      consumes:
      - application/json
      description: Add new image to post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: Image Url
        in: path
        name: image_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: message success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request error
          schema: {}
      summary: Add new image to post
      tags:
      - images
  /users/hello:
    get:
      consumes:
      - application/json
      description: hello
      produces:
      - application/json
      responses:
        "200":
          description: say hi
          schema:
            type: string
      summary: hello
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: User login
      parameters:
      - description: User log in info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/usermodel.UserLoginInfo'
      produces:
      - application/json
      responses:
        "200":
          description: user data
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request error
          schema: {}
      summary: User login
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register new user account
      parameters:
      - description: User info for registering a new account
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/usermodel.Register'
      produces:
      - application/json
      responses:
        "201":
          description: message success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request error
          schema: {}
      summary: Register new user account
      tags:
      - users
swagger: "2.0"
